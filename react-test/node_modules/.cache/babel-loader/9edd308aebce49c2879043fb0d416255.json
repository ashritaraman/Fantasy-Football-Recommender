{"ast":null,"code":"var _jsxFileName = \"/Users/aparnacalambur/Documents/AI_Prac/react-test/src/VehicleList.js\";\nimport React from 'react';\nimport { Divider, Segment } from 'semantic-ui-react';\nimport { VehicleTable } from './VehicleTable.js';\nimport { VehicleFilter } from './VehicleFilter.js';\nconst queryParams = ['_limit', '_order', '_sort', 'q', '_page'];\nexport default class VehicleList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSort = clickedColumn => {\n      const {\n        _sort,\n        _order\n      } = this.state;\n      let newOrder = _order === 'asc' ? 'desc' : 'asc';\n\n      if (_sort !== clickedColumn) {\n        newOrder = 'asc';\n      }\n\n      this.loadData({\n        _sort: clickedColumn,\n        _page: 1,\n        _order: newOrder\n      });\n    };\n\n    this.onChangeLimit = (event, data) => {\n      if (data.value !== this.state._limit) {\n        this.loadData({\n          _limit: data.value,\n          _page: 1\n        });\n      }\n    };\n\n    this.onSubmitFilter = filter => {\n      if (filter !== this.state.q) {\n        this.loadData({\n          q: filter,\n          _page: 1\n        });\n      }\n    };\n\n    this.onChangePage = (event, data) => {\n      const {\n        activePage\n      } = data;\n\n      if (activePage !== this.state._page) {\n        this.loadData({\n          _page: activePage\n        });\n      }\n    };\n\n    this.addFavorite = vehicle => {\n      vehicle.favorite = !vehicle.favorite;\n      fetch(`/api/v1/vehicles/${vehicle.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(vehicle)\n      }).then(response => {\n        if (response.ok) {\n          response.json().then(data => {\n            const index = this.state.vehicles.findIndex(vehicle => vehicle.id === data.id);\n            this.setState({\n              vehicles: Object.assign([...this.state.vehicles], {\n                [index]: data\n              })\n            });\n          });\n        } else {\n          response.json().then(error => {\n            console.log(`Failed to load data: ${error.message}`);\n          });\n        }\n      });\n    };\n\n    this.loadData = params => {\n      const newState = Object.assign({}, this.state, params, {\n        loading: false\n      });\n      this.setState({\n        loading: true\n      });\n      queryParams.forEach(function (element) {\n        if (!(element in params)) {\n          params[element] = newState[element];\n        }\n      });\n      const esc = encodeURIComponent;\n      const query = Object.keys(params).map(k => esc(k) + '=' + esc(params[k])).join('&'); // Make a request without limit first to get the total number of data.\n\n      let totalCountQuery = '';\n\n      if (params.q !== '') {\n        totalCountQuery = `q=${params.q}`;\n      }\n\n      fetch(`/api/v1/vehicles?${totalCountQuery}`).then(response => {\n        if (response.ok) {\n          response.json().then(data => {\n            this.setState({\n              totalCount: data.length\n            });\n          });\n        } else {\n          response.json().then(error => {\n            console.log(`Failed to load data: ${error.message}`);\n          });\n        }\n\n        this.setState(newState, () => {\n          fetch('/api/v1/vehicles?' + query).then(response => {\n            if (response.ok) {\n              response.json().then(data => {\n                this.setState({\n                  vehicles: data\n                });\n              });\n            } else {\n              response.json().then(error => {\n                console.log(`Failed to load data: ${error.message}`);\n              });\n            }\n\n            const newState = Object.assign({}, this.state, params, {\n              loading: false\n            });\n            this.setState(newState);\n          });\n        });\n      });\n    };\n\n    this.state = {\n      vehicles: [],\n      _sort: 'id',\n      _page: 1,\n      _order: null,\n      _limit: 10,\n      q: '',\n      totalCount: 0,\n      loading: false\n    };\n    this.onSubmitFilter = this.onSubmitFilter;\n  }\n\n  componentDidMount() {\n    this.loadData({});\n  }\n\n  static directionConverter(order) {\n    if (order === 'asc') {\n      return 'ascending';\n    } else if (order === 'desc') {\n      return 'descending';\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(VehicleFilter, {\n      filter: this.state.q,\n      totalCount: this.state.totalCount,\n      onSubmitFilter: this.onSubmitFilter,\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(VehicleTable, {\n      vehicles: this.state.vehicles,\n      totalCount: this.state.totalCount,\n      totalPages: Math.ceil(this.state.totalCount / this.state._limit),\n      currentPage: this.state._page,\n      onChangePage: this.onChangePage,\n      addFavorite: this.addFavorite,\n      column: this.state._sort,\n      direction: VehicleList.directionConverter(this.state._order),\n      handleSort: this.handleSort,\n      onChangeLimit: this.onChangeLimit,\n      limit: this.state._limit.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/aparnacalambur/Documents/AI_Prac/react-test/src/VehicleList.js"],"names":["React","Divider","Segment","VehicleTable","VehicleFilter","queryParams","VehicleList","Component","constructor","props","handleSort","clickedColumn","_sort","_order","state","newOrder","loadData","_page","onChangeLimit","event","data","value","_limit","onSubmitFilter","filter","q","onChangePage","activePage","addFavorite","vehicle","favorite","fetch","id","method","headers","body","JSON","stringify","then","response","ok","json","index","vehicles","findIndex","setState","Object","assign","error","console","log","message","params","newState","loading","forEach","element","esc","encodeURIComponent","query","keys","map","k","join","totalCountQuery","totalCount","length","componentDidMount","directionConverter","order","render","Math","ceil","toString"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Divider, Segment } from 'semantic-ui-react';\nimport { VehicleTable } from './VehicleTable.js';\nimport { VehicleFilter } from './VehicleFilter.js';\n\nconst queryParams = ['_limit', '_order', '_sort', 'q', '_page'];\n\nexport default class VehicleList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vehicles: [],\n      _sort: 'id',\n      _page: 1,\n      _order: null,\n      _limit: 10,\n      q: '',\n      totalCount: 0,\n      loading: false,\n    };\n    this.onSubmitFilter = this.onSubmitFilter;\n  }\n\n  componentDidMount() {\n    this.loadData({});\n  }\n\n  static directionConverter(order) {\n    if (order === 'asc') {\n      return 'ascending';\n    } else if (order === 'desc') {\n      return 'descending';\n    } else {\n      return null;\n    }\n  }\n\n  handleSort = clickedColumn => {\n    const { _sort, _order } = this.state;\n\n    let newOrder = _order === 'asc' ? 'desc' : 'asc';\n    if (_sort !== clickedColumn) {\n      newOrder = 'asc';\n    }\n\n    this.loadData({\n      _sort: clickedColumn,\n      _page: 1,\n      _order: newOrder,\n    });\n  };\n\n  onChangeLimit = (event, data) => {\n    if (data.value !== this.state._limit) {\n      this.loadData({ _limit: data.value, _page: 1 });\n    }\n  };\n\n  onSubmitFilter = filter => {\n    if (filter !== this.state.q) {\n      this.loadData({ q: filter, _page: 1 });\n    }\n  };\n\n  onChangePage = (event, data) => {\n    const { activePage } = data;\n    if (activePage !== this.state._page) {\n      this.loadData({ _page: activePage });\n    }\n  };\n\n  addFavorite = vehicle => {\n    vehicle.favorite = !vehicle.favorite;\n    fetch(`/api/v1/vehicles/${vehicle.id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(vehicle),\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(data => {\n          const index = this.state.vehicles.findIndex(\n            vehicle => vehicle.id === data.id\n          );\n          this.setState({\n            vehicles: Object.assign([...this.state.vehicles], {\n              [index]: data,\n            }),\n          });\n        });\n      } else {\n        response.json().then(error => {\n          console.log(`Failed to load data: ${error.message}`);\n        });\n      }\n    });\n  };\n\n  loadData = params => {\n    const newState = Object.assign({}, this.state, params, { loading: false });\n    this.setState({ loading: true });\n\n    queryParams.forEach(function (element) {\n      if (!(element in params)) {\n        params[element] = newState[element];\n      }\n    });\n\n    const esc = encodeURIComponent;\n    const query = Object.keys(params)\n      .map(k => esc(k) + '=' + esc(params[k]))\n      .join('&');\n\n    // Make a request without limit first to get the total number of data.\n    let totalCountQuery = '';\n    if (params.q !== '') {\n      totalCountQuery = `q=${params.q}`;\n    }\n\n    fetch(`/api/v1/vehicles?${totalCountQuery}`).then(response => {\n      if (response.ok) {\n        response.json().then(data => {\n          this.setState({ totalCount: data.length });\n        });\n      } else {\n        response.json().then(error => {\n          console.log(`Failed to load data: ${error.message}`);\n        });\n      }\n      this.setState(newState, () => {\n        fetch('/api/v1/vehicles?' + query).then(response => {\n          if (response.ok) {\n            response.json().then(data => {\n              this.setState({ vehicles: data });\n            });\n          } else {\n            response.json().then(error => {\n              console.log(`Failed to load data: ${error.message}`);\n            });\n          }\n          const newState = Object.assign({}, this.state, params, {\n            loading: false,\n          });\n          this.setState(newState);\n        });\n      });\n    });\n  };\n\n  render() {\n    return (\n      <Segment>\n        <VehicleFilter\n          filter={this.state.q}\n          totalCount={this.state.totalCount}\n          onSubmitFilter={this.onSubmitFilter}\n          loading={this.state.loading}\n        />\n        <Divider />\n        <VehicleTable\n          vehicles={this.state.vehicles}\n          totalCount={this.state.totalCount}\n          totalPages={Math.ceil(this.state.totalCount / this.state._limit)}\n          currentPage={this.state._page}\n          onChangePage={this.onChangePage}\n          addFavorite={this.addFavorite}\n          column={this.state._sort}\n          direction={VehicleList.directionConverter(this.state._order)}\n          handleSort={this.handleSort}\n          onChangeLimit={this.onChangeLimit}\n          limit={this.state._limit.toString()}\n        />\n      </Segment>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}